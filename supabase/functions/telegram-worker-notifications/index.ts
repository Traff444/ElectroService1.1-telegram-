import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—á–∏—Ö
interface WorkerNotificationData {
  worker_id: string;
  task_id: string;
  manager_response: 'approved' | 'rejected' | 'request_photos';
  task_title: string;
  manager_name?: string;
  response_comment?: string;
  custom_message?: string;
}

interface TelegramMessage {
  chat_id: number;
  text: string;
  parse_mode?: string;
  reply_markup?: {
    inline_keyboard: Array<Array<{
      text: string;
      url?: string;
      callback_data?: string;
    }>>;
  };
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const SUPABASE_URL = Deno.env.get('PROJECT_URL')
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SERVICE_ROLE_KEY')

    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error('Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const notificationData: WorkerNotificationData = await req.json()
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ:', notificationData)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const { data: workerData, error: workerError } = await supabase
      .rpc('get_worker_telegram_data', { worker_uuid: notificationData.worker_id })

    if (workerError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ:', workerError)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ: ${workerError.message}`)
    }

    if (!workerData || workerData.length === 0) {
      console.log('–†–∞–±–æ—á–∏–π —Å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω:', notificationData.worker_id)
      return new Response(
        JSON.stringify({ 
          success: false, 
          message: '–†–∞–±–æ—á–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 404
        }
      )
    }

    const worker = workerData[0]

    if (!worker.notifications_enabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ:', worker.worker_id)
      return new Response(
        JSON.stringify({ 
          success: false, 
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ' 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200
        }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
    let messageText: string
    let messageIcon: string
    let keyboard = null

    switch (notificationData.manager_response) {
      case 'approved':
        messageIcon = '‚úÖ'
        messageText = `‚úÖ *–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!*

üìã **${notificationData.task_title}**

üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.

${notificationData.manager_name ? `–ü—Ä–∏–Ω—è–ª: ${notificationData.manager_name}` : ''}
‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        keyboard = {
          inline_keyboard: [
            [
              { 
                text: "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                url: `${SUPABASE_URL?.replace('supabase.co', 'vercel.app') || 'https://electroservice.vercel.app'}/worker` 
              }
            ]
          ]
        }
        break

      case 'rejected':
        messageIcon = '‚ùå'
        messageText = `‚ùå *–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É*

üìã **${notificationData.task_title}**

${notificationData.response_comment ? `üìù **–ü—Ä–∏—á–∏–Ω–∞:** ${notificationData.response_comment}` : ''}

üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è.

${notificationData.manager_name ? `–í–µ—Ä–Ω—É–ª: ${notificationData.manager_name}` : ''}
‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = {
          inline_keyboard: [
            [
              { 
                text: "üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", 
                url: `${SUPABASE_URL?.replace('supabase.co', 'vercel.app') || 'https://electroservice.vercel.app'}/worker/task/${notificationData.task_id}` 
              }
            ],
            [
              { 
                text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", 
                callback_data: `contact_manager_${notificationData.task_id}` 
              }
            ]
          ]
        }
        break

      case 'request_photos':
        messageIcon = 'üì∏'
        messageText = `üì∏ *–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*

üìã **${notificationData.task_title}**

üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

${notificationData.response_comment ? `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${notificationData.response_comment}` : ''}

üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.

${notificationData.manager_name ? `–ó–∞–ø—Ä–æ—Å–∏–ª: ${notificationData.manager_name}` : ''}
‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        keyboard = {
          inline_keyboard: [
            [
              { 
                text: "üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", 
                url: `${SUPABASE_URL?.replace('supabase.co', 'vercel.app') || 'https://electroservice.vercel.app'}/worker/task/${notificationData.task_id}/photos` 
              }
            ]
          ]
        }
        break

      default:
        messageIcon = '‚ÑπÔ∏è'
        messageText = notificationData.custom_message || `
‚ÑπÔ∏è *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ*

üìã **${notificationData.task_title}**

–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

‚è∞ ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const message: TelegramMessage = {
      chat_id: worker.chat_id,
      text: messageText,
      parse_mode: 'Markdown',
      reply_markup: keyboard || undefined
    }

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–º—É:', {
      chat_id: worker.chat_id,
      worker_name: worker.full_name,
      task_id: notificationData.task_id,
      response_type: notificationData.manager_response
    })

    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message)
      }
    )

    const telegramResult = await telegramResponse.json()

    if (!telegramResult.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramResult)
      throw new Error(`Telegram API error: ${telegramResult.description}`)
    }

    const messageId = telegramResult.result?.message_id

    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID:', messageId)

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (messageId) {
      const notificationType = notificationData.manager_response === 'approved' ? 'task_approved' :
                              notificationData.manager_response === 'rejected' ? 'task_rejected' : 
                              'photos_requested'

      const { error: logError } = await supabase
        .from('task_notifications')
        .insert({
          task_id: notificationData.task_id,
          worker_id: notificationData.worker_id,
          telegram_message_id: messageId,
          notification_type: notificationType,
          status: 'sent'
        })

      if (logError) {
        console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ:', logError)
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
      }
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        telegram_message_id: messageId,
        notification_type: notificationData.manager_response
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ telegram-worker-notifications function:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})