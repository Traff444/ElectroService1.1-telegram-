import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Telegram API
interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: CallbackQuery;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
}

interface CallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  data?: string;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error('Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

    // –ü–∞—Ä—Å–∏–º webhook –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    const update: TelegramUpdate = await req.json()
    console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram:', update.update_id)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      await handleCallbackQuery(update.callback_query, supabase, TELEGRAM_BOT_TOKEN)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      await handleMessage(update.message, supabase, TELEGRAM_BOT_TOKEN)
    }

    return new Response(
      JSON.stringify({ success: true }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ telegram-webhook function:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(
  callbackQuery: CallbackQuery, 
  supabase: any, 
  botToken: string
) {
  const { id, from, message, data } = callbackQuery

  if (!data || !message) {
    console.log('Callback query –±–µ–∑ data –∏–ª–∏ message')
    return
  }

  console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback:', data, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', from.id)

  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
  const [action, taskId] = data.split('_')

  if (!action || !taskId) {
    console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', data)
    await answerCallbackQuery(id, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã', botToken)
    return
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ
    const { data: telegramUser, error: userError } = await supabase
      .from('telegram_users')
      .select(`
        user_id,
        users (
          id,
          role,
          full_name,
          is_active
        )
      `)
      .eq('telegram_id', from.id)
      .eq('is_active', true)
      .single()

    if (userError || !telegramUser) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω:', from.id)
      await answerCallbackQuery(
        id, 
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π', 
        botToken
      )
      return
    }

    const user = telegramUser.users
    if (!user?.is_active || !['manager', 'director', 'admin'].includes(user.role)) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤:', user)
      await answerCallbackQuery(
        id, 
        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', 
        botToken
      )
      return
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    let responseText = ''
    let newMessageText = ''

    switch (action) {
      case 'approve':
        await approveTask(taskId, user.id, supabase)
        responseText = '‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞'
        newMessageText = `‚úÖ *–ó–ê–î–ê–ß–ê –ü–†–ò–ù–Ø–¢–ê*\n\n–ü—Ä–∏–Ω—è—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${user.full_name}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`
        break

      case 'reject':
        await rejectTask(taskId, user.id, supabase)
        responseText = '‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        newMessageText = `‚ùå *–ó–ê–î–ê–ß–ê –û–¢–ö–õ–û–ù–ï–ù–ê*\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${user.full_name}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}\n\n_–†–∞–±–æ—á–∏–π –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_`
        break

      case 'request':
        await requestMorePhotos(taskId, user.id, supabase)
        responseText = 'üì∏ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ'
        newMessageText = `üì∏ *–ó–ê–ü–†–û–®–ï–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–û–¢–û*\n\n–ó–∞–ø—Ä–æ—Å–∏–ª: ${user.full_name}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}\n\n_–†–∞–±–æ—á–∏–π –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_`
        break

      case 'details':
        await sendTaskDetails(taskId, from.id, supabase, botToken)
        responseText = 'üëÅ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
        break

      default:
        responseText = '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await answerCallbackQuery(id, responseText, botToken)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    if (newMessageText && action !== 'details') {
      await editMessageText(
        message.chat.id,
        message.message_id,
        newMessageText,
        botToken
      )
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error)
    await answerCallbackQuery(
      id, 
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã', 
      botToken
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(
  message: TelegramMessage, 
  supabase: any, 
  botToken: string
) {
  const { from, chat, text } = message

  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', from.id)

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
  if (text === '/start') {
    await handleStartCommand(chat.id, from, supabase, botToken)
    return
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
  if (text?.startsWith('/')) {
    await handleUnknownCommand(chat.id, botToken)
    return
  }

  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
  await sendHelpMessage(chat.id, botToken)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(
  chatId: number,
  from: TelegramUser,
  supabase: any,
  botToken: string
) {
  const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–≠–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤–∏—Å*!

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.

üîó *–î–ª—è —Å–≤—è–∑–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:*
1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"  
3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: \`${from.id}\`
4. –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"

üì± *–ü–æ—Å–ª–µ —Å–≤—è–∑–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç—ã –æ—Ç —Ä–∞–±–æ—á–∏—Ö
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã

‚ùì –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help`

  await sendTelegramMessage(chatId, welcomeMessage, 'Markdown', botToken)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
async function handleUnknownCommand(chatId: number, botToken: string) {
  const message = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –°–ø—Ä–∞–≤–∫–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö —Å–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–∏—Å—Ç–µ–º—ã.`

  await sendTelegramMessage(chatId, message, 'Markdown', botToken)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
async function sendHelpMessage(chatId: number, botToken: string) {
  const helpMessage = `üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≠–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤–∏—Å –±–æ—Ç—É*

üéØ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.

‚ö° *–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç
‚Ä¢ –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ

üîó *–ù–∞—Å—Ç—Ä–æ–π–∫–∞:*
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–∏—Å—Ç–µ–º—ã (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram ID: \`${chatId}\`)

‚ùì –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`

  await sendTelegramMessage(chatId, helpMessage, 'Markdown', botToken)
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
async function approveTask(taskId: string, managerId: string, supabase: any) {
  console.log('–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏:', taskId, '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:', managerId)

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–µ–º–∫–∏ –∑–∞–¥–∞—á–∏
  const { error } = await supabase.rpc('process_task_approval', {
    task_uuid: taskId,
    action: 'approve',
    comment: '–ü—Ä–∏–Ω—è—Ç–æ —á–µ—Ä–µ–∑ Telegram'
  })

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏:', error)
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`)
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
  await notifyWorker(taskId, 'approved', '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!', supabase)
}

async function rejectTask(taskId: string, managerId: string, supabase: any) {
  console.log('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', taskId, '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:', managerId)

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const { error } = await supabase.rpc('process_task_approval', {
    task_uuid: taskId,
    action: 'return',
    comment: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram'
  })

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
    throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`)
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
  await notifyWorker(taskId, 'rejected', '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.', supabase)
}

async function requestMorePhotos(taskId: string, managerId: string, supabase: any) {
  console.log('–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId)

  // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç—Ä–µ–±—É—é—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
  const { error } = await supabase
    .from('tasks')
    .update({ 
      status: 'awaiting_photos',
      updated_at: new Date().toISOString()
    })
    .eq('id', taskId)

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error)
    throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`)
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
  await notifyWorker(
    taskId, 
    'photos_requested', 
    '–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.', 
    supabase
  )
}

async function sendTaskDetails(
  taskId: string, 
  telegramId: number, 
  supabase: any, 
  botToken: string
) {
  console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞—á–∏:', taskId)

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
  const { data: task, error } = await supabase
    .from('tasks')
    .select(`
      *,
      assigned_user:users!assigned_to(full_name, email),
      task_photos(photo_url, photo_type),
      task_checklist(item_name, is_completed, notes)
    `)
    .eq('id', taskId)
    .single()

  if (error || !task) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏:', error)
    await sendTelegramMessage(
      telegramId,
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏',
      undefined,
      botToken
    )
    return
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const details = `üìã *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${task.title}
*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${task.assigned_user?.full_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority || '–û–±—ã—á–Ω—ã–π'}
*–ê–¥—Ä–µ—Å:* ${task.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*
‚Ä¢ –ù–∞—á–∞—Ç–æ: ${task.started_at ? new Date(task.started_at).toLocaleString('ru-RU') : '–ù–µ –Ω–∞—á–∞—Ç–æ'}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${task.completed_at ? new Date(task.completed_at).toLocaleString('ru-RU') : '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}

üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:* ${task.task_photos?.length || 0} —à—Ç.
‚úÖ *–ß–µ–∫-–ª–∏—Å—Ç:* ${task.task_checklist?.filter((item: any) => item.is_completed).length || 0}/${task.task_checklist?.length || 0}`

  await sendTelegramMessage(telegramId, details, 'Markdown', botToken)
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ
async function notifyWorker(
  taskId: string, 
  notificationType: string, 
  message: string, 
  supabase: any
) {
  console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –æ –∑–∞–¥–∞—á–µ:', taskId, '—Ç–∏–ø:', notificationType)

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–º—É
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const { error } = await supabase
    .from('task_notifications')
    .insert({
      task_id: taskId,
      notification_type: notificationType,
      status: 'sent'
    })

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–º—É:', error)
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram API
async function answerCallbackQuery(
  callbackQueryId: string, 
  text: string, 
  botToken: string
) {
  await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text,
      show_alert: false
    })
  })
}

async function editMessageText(
  chatId: number,
  messageId: number,
  text: string,
  botToken: string
) {
  await fetch(`https://api.telegram.org/bot${botToken}/editMessageText`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      message_id: messageId,
      text: text,
      parse_mode: 'Markdown'
    })
  })
}

async function sendTelegramMessage(
  chatId: number,
  text: string,
  parseMode?: string,
  botToken?: string
) {
  if (!botToken) {
    console.error('Bot token –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    return
  }

  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: parseMode
    })
  })
}