/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ë–î
 * 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ Edge Function
 * 3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'success' –∏–ª–∏ 'error'
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'http://127.0.0.1:54321';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function processPendingNotifications() {
  console.log('üîÑ –ò—â—É –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const { data: pendingCalls, error } = await supabase
      .from('edge_function_calls')
      .select('*')
      .eq('function_name', 'telegram-notifications')
      .eq('status', 'pending')
      .order('created_at', { ascending: true })
      .limit(10);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return;
    }

    if (!pendingCalls || pendingCalls.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingCalls.length} –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

    for (const call of pendingCalls) {
      console.log(`üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏: ${call.payload.task_title}`);
      
      try {
        // –í—ã–∑—ã–≤–∞–µ–º Edge Function
        const response = await fetch(`${SUPABASE_URL}/functions/v1/telegram-notifications`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`
          },
          body: JSON.stringify(call.payload)
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ success
          await supabase
            .from('edge_function_calls')
            .update({ 
              status: 'success',
              response: result,
              completed_at: new Date().toISOString()
            })
            .eq('id', call.id);

          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! Message ID: ${result.telegram_message_id}`);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ error
          await supabase
            .from('edge_function_calls')
            .update({ 
              status: 'error',
              error_message: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              completed_at: new Date().toISOString()
            })
            .eq('id', call.id);

          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${call.id}:`, err);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ error
        await supabase
          .from('edge_function_calls')
          .update({ 
            status: 'error',
            error_message: err.message,
            completed_at: new Date().toISOString()
          })
          .eq('id', call.id);
      }
    }

    console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
processPendingNotifications();